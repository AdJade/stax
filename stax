#!/bin/bash

set -e

#####################################################################
#   stax - builds a VPC in AWS - https://github.com/philcryer/stax
#   https://github.com/philcryer/stax/blob/master/LICENSE
#   this should work(tm)!                                  2015/01
#####################################################################

pkg="stax"
version="0.1"
STAX_PRE_NAME="stax"
SCRIPT_PATH=$( cd $(dirname $0) ; pwd -P )
SYSTEM=`uname`
aws="aws --color on"
STAX_DIR="$HOME/.stax"
STAX_NAME_FILE="$STAX_DIR/stax-name"
config="config/config.json"
config_tmp="/tmp/config.json"
SSH_OPTIONS="-q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

stax-colors(){
    green=$(tput setaf 2)
    yellow=$(tput setaf 3)
    blue=$(tput setaf 4)
    purple=$(tput setaf 5)
    cyan=$(tput setaf 6)
    white=$(tput setaf 7)
    reset=$(tput sgr0)
}

stax-usage(){
    cat <<EOM
Usage: stax <command>

Commands:
  connect           Connect to the jumpbox in the VPC stax over SSH
  create            Create a new VPC stax in AWS
  describe          Describe the stax created from this host
  desc-auto         Describe the autoscaling groups in the stax
  destroy           Destroy the existing VPC stax
  fleet             Describe currently created fleet stax
  help              Output this message
  history           View history of recently created/destroyed stax
  list              List all completely built and running stax
  services          List servers that are available to run across a stax
  start <service>   Start a service across the stax cluster

For more help, check the docs: https://github.com/philcryer/stax
EOM
}

# make sure a command was provided
if [ -z "$1" ]; then
    stax-usage
    exit 2
fi

stax-logo(){
NUMS=`wc -l < assets/stax/stax-slogans`
    echo "${green}     _             "
    echo "    | | ${yellow}`head -$((${RANDOM} % ${NUMS} + 1)) assets/stax/stax-slogans | tail -1`${green}"
    echo " ___| |_ __ ___  __"
    echo '/ __| __/ _` \ \/ /'
    echo '\__ \ || (_| |>  < '
    echo "|___/\__\__,_/_/\_\ ${reset}"
    echo
}

stax-existing(){
    if [ ! -f $STAX_NAME_FILE ]; then
        echo "${yellow}[ ${red}ERRR${yellow} ]${reset} no stax defined, use create first"
        exit 1
    else
        STAX_EXIST=$(<$STAX_NAME_FILE)
    fi
}

stax-preflight(){
    which aws > /dev/null 2>&1 || { echo "awscli is not installed. Aborting."; exit 1; }
    if [ ! -f "$HOME/.aws/config" ]; then
        echo "awscli not configured, run 'aws configure'. Aborting."
        exit 1
    fi
    if [ ! -d "$STAX_DIR" ]; then
        echo "creating directory $STAX_DIR"
        mkdir -p "$STAX_DIR"
    fi
    if ! chmod 700 "$STAX_DIR"; then
        echo "$pkg: failed to chmod $STAX_DIR"
        exit 1
    fi
    if [ ! -f "$config" ]; then
        echo "$pkg: $config does not exist, configuration required"
        echo "$pkg: copy example to config directory, configure it and run again."
        echo "    $ cp $config.example $config"
        echo "$pkg: Aborting."
        exit 1
    fi
}

stax-validate(){
    template="$1"
    echo "$template"
    if ! $aws cloudformation validate-template --template-url "$template" > /dev/null; then
        echo "${yellow}[ ${red}ERRR${yellow} ]${reset}     template failed to validate, exiting"
        stax-destroy-bucket
        stax-destroy-files
        stax-destroy-key
        exit 2
    fi
}

stax-create-key(){
    STAX_KEY="$STAX_NAME"
    STAX_KEY_FILE="$STAX_DIR/$STAX_NAME.pem"
    touch "$STAX_KEY_FILE"
    chmod 600 "$STAX_KEY_FILE"
    # this would be better if we had a real json parser
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     creating key pair: "
    $aws ec2 create-key-pair --key-name "$STAX_NAME" --query 'KeyMaterial' --output text > "$STAX_KEY_FILE"
    SSH_OPTIONS="$SSH_OPTIONS -i $STAX_KEY_FILE"
    echo "done"
}

stax-create-bucket(){
    bucket="$1"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     creating bucket: "
    $aws s3 mb "s3://$bucket" > /dev/null
    echo "done"
}

stax-create(){
    stax-generate
    echo "${yellow}[ ${cyan}NAME${yellow} ]${reset} $STAX_NAME"
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}   creating stax"
    stax-create-key
    stax-create-bucket "$STAX_NAME"
    # upload template to s3 to have bigger size limits
    template="$STAX_NAME/$STAX_NAME.json"
    template_url="https://s3.amazonaws.com/$template"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     uploading template: "
    $aws s3 cp "$SCRIPT_PATH/templates/cloudformation-template-vpc.json" "s3://$template" > /dev/null
    echo "done"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     validating template: "
    stax-validate "$template_url" > /dev/null
    echo "done"
    # upload vpc assets
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     uploading vpc assets: "
    for f in assets/vpc/*; do
        $aws s3 cp "$f" "s3://$STAX_NAME/" > /dev/null
    done
    echo "done"
    echo $STAX_NAME > $STAX_NAME_FILE
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}     creating vpc in aws"
    if $aws cloudformation create-stack \
        --stack-name $STAX_NAME \
        --template-url "$template_url" \
        --parameters "$(<$config_tmp)" \
        --capabilities CAPABILITY_IAM > /dev/null
    then
        echo "${yellow}[ ${cyan}----${yellow} ]${reset}   stax creation complete"
        # new 'audit' functionality, save names and create date of stax you've created
        # if useful, we could save this to S3: and make it persist
        if [ ! -d $STAX_DIR/audit ]; then
            mkdir -p $STAX_DIR/audit
        fi
        touch $STAX_DIR/audit/`date +'%Y%m%d-%H%M%S'`-created-$STAX_NAME
    else
        echo "${yellow}[ ${red}ERRR${yellow} ]${reset}     creation failed, exiting"
        stax-destroy-bucket
        stax-destroy-files
        stax-destroy-key
        exit 2
    fi
}

stax-describe(){
    echo "${yellow}[ ${cyan}NAME${yellow} ]${reset} $STAX_NAME"
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}   describe stax"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     querying aws: "
    if ! aws cloudformation describe-stacks --stack-name $STAX_NAME > /dev/null 2>&1; then
        echo
        echo "${yellow}[ ${cyan}----${yellow} ]${reset} stax $STAX_NAME does not exist in AWS"
        stax-destroy-bucket
        stax-destroy-files
        stax-destroy-key
        exit 1
    fi
    echo "done"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     saving output"
    aws cloudformation describe-stacks --stack-name $STAX_NAME > "$STAX_DIR/$STAX_NAME.json"; echo ": done"
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}     see $STAX_DIR/$STAX_NAME.json for details"
    #echo "${yellow}[ ${cyan}----${yellow} ]${reset}     output summary (see ~/.stax/$STAX_NAME.json for full details)"
    #echo "["
    #cat ~/.stax/vpc* | grep "StackName" 
    #cat ~/.stax/vpc* | grep "StackId\"\:"
    #cat ~/.stax/vpc* | grep "StackStatus\"\:"
    #cat ~/.stax/vpc* | grep "Description\"\:\ \"Autoscaling"
    #echo "]"
}

stax-list(){
    #echo "${yellow}[ ${cyan}NAME${yellow} ]${reset} $STAX_NAME"
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}   list running stax"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     querying aws: "
    aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE > /tmp/cls
    echo "done"
    cat /tmp/cls; rm /tmp/cls
    exit 0
}

stax-services(){
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}   services that stax can run on the cluster"
    echo "{"
    ls -1 assets/services/*service | cut -d"/" -f3 | cut -d"." -f1
    echo "}"
    exit 0
}

stax-start-services(){
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}   starting service(s) on the stax cluster"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     pushing service file to $STAX_PUB_IP: "
    scp $SSH_OPTIONS /tmp/servicerunner ec2-user@$STAX_PUB_IP:~ > /dev/null
    echo "done"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     setting permissions on service file: "
    ssh $SSH_OPTIONS ec2-user@$STAX_PUB_IP 'chmod 755 servicerunner' > /dev/null
    echo "done"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     running service file: "
    ssh $SSH_OPTIONS ec2-user@$STAX_PUB_IP 'sh servicerunner' > /dev/null
    echo "done"
    rm /tmp/servicerunner*
    sleep 5
    stax-fleetstats
}

stax-fleetstats(){
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}  status from fleetctl on the cluster: "
    ssh $SSH_OPTIONS ec2-user@$STAX_PUB_IP 'sh fleetstats'
    #exit 0
}

stax-descauto(){
    echo "${yellow}[ ${cyan}NAME${yellow} ]${reset} $STAX_NAME"
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}   define autoscaling policies"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     querying aws: "
    aws autoscaling describe-auto-scaling-groups | grep "arn:aws:autoscaling" | grep `cat $STAX_NAME_FILE` | cut -d"/" -f2 | cut -d"\"" -f1 > /tmp/asg; 
    echo "done"
    aws autoscaling describe-policies --auto-scaling-group-name `cat /tmp/asg`
    rm /tmp/asg
    exit 0
}

stax-history(){
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}   history"
    if [ ! -d $STAX_DIR/audit ]; then
        mkdir -p $STAX_DIR/audit
    fi
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}     recenntly created and destoryed stax"
    echo "{"
    ls -1 $STAX_DIR/audit
    echo "}"
    exit 0
}

stax-getip(){
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}   get public IP (EIP)"
    if [ `cat "$STAX_DIR/$STAX_NAME.json" | grep CREATE_COMPLETE | wc -l` -eq "0" ]; then
        echo "${yellow}[ ${cyan}NULL${yellow} ]${reset}     IP is undefined, this means the build is not complete, try again in a few minutes"
        exit 1
    fi
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     querying aws: "
    STAX_PUB_IP=`cat "$STAX_DIR/$STAX_NAME.json" | grep -B2 -A2 'JumpEIP' | grep -o '[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*'`
    echo "done"
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}     public IP (EIP): $STAX_PUB_IP"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     writing to $STAX_IPS_FILE: "
    echo $STAX_PUB_IP > $STAX_IPS_FILE
    echo "done"
}

stax-pushkey(){
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}   push key to jumpbox"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     pushing key to $STAX_PUB_IP: "
    scp $SSH_OPTIONS $STAX_KEY_FILE ec2-user@$STAX_PUB_IP:.ssh > /dev/null
    echo "done"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     setting permissions on key: "
    ssh $SSH_OPTIONS ec2-user@$STAX_PUB_IP 'chmod 0600 .ssh/*.pem' > /dev/null
    echo "done"
}

stax-motd(){
    echo "     _             " > /tmp/motd
    echo "    | | welcome to the jumpbox" >> /tmp/motd
    echo " ___| |_ __ ___  __" >> /tmp/motd
    echo '/ __| __/ _` \ \/ /' >> /tmp/motd
    echo "\__ \ || (_| |>  <" >> /tmp/motd
    echo "|___/\__\__,_/_/\_\\" >> /tmp/motd
    echo >> /tmp/motd
    echo "IP        `echo $STAX_PUB_IP`" >> /tmp/motd
    echo "Name      `cat $STAX_NAME_FILE`" >> /tmp/motd
    echo "Built     `date`" >> /tmp/motd
}

stax-popjumpbox(){
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}   setup motd and bashrc on jumpbox"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     pushing motd to $STAX_PUB_IP: "
    if [ ! -f '/tmp/motd' ]; then
        echo "${yellow}[ ${red}ERRR${yellow} ]${reset}     motd file not found, exiting";
        exit 1
    fi
    scp $SSH_OPTIONS /tmp/motd ec2-user@$STAX_PUB_IP:~ > /dev/null
    echo "done"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     pushing bashrc to $STAX_PUB_IP: "
    scp $SSH_OPTIONS assets/stax/bashrc ec2-user@$STAX_PUB_IP:~/.bashrc > /dev/null
    echo "done"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     copying service definitions to $STAX_PUB_IP: "
    scp $SSH_OPTIONS -r assets/services ec2-user@$STAX_PUB_IP:~ > /dev/null
    echo "done"
    rm /tmp/motd
}

stax-getdockerips(){
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}   get docker IP(s)"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     querying aws: "
    docker_hosts="$STAX_DIR/$STAX_NAME.docker_hosts"
    aws ec2 describe-instances --output text --query 'Reservations[*].Instances[*]' | awk "\$1 == \"0\" { if (ip != \"\" && name == \"docker-$STAX_NAME\") print ip; ip = \"\" } \$1 == \"PRIVATEIPADDRESSES\" { ip = \$3 } \$1 == \"TAGS\" && \$2 == \"Name\" { name = \$3 }" > "$docker_hosts"
    router_hosts="$STAX_DIR/$STAX_NAME.router_hosts"
    aws ec2 describe-instances --output text --query 'Reservations[*].Instances[*]' | awk "\$1 == \"0\" { if (ip != \"\" && name == \"router-docker-$STAX_NAME\") print ip; ip = \"\" } \$1 == \"PRIVATEIPADDRESSES\" { ip = \$3 } \$1 == \"TAGS\" && \$2 == \"Name\" { name = \$3 }" > "$router_hosts"
    echo "done"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     building docker connect: "
    docker_connect="$STAX_DIR/$STAX_NAME.dockconnect"
    sed "s|STAX_KEY|${STAX_KEY}|g" assets/stax/dockconnect > "$docker_connect"
    router_connect="$STAX_DIR/$STAX_NAME.routerdockconnect"
    sed "s|STAX_KEY|${STAX_KEY}|g" assets/stax/routerdockconnect > "$router_connect"
    echo "done"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     building fleetstats connect: "
    fleet_stats="$STAX_DIR/$STAX_NAME.fleetstats"
    sed "s|STAX_KEY|${STAX_KEY}|g" assets/stax/fleetstats > "$fleet_stats"
    echo "done"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     building fleetslogs connect: "
    fleet_logs="$STAX_DIR/$STAX_NAME.fleetlogs"
    sed "s|STAX_KEY|${STAX_KEY}|g" assets/stax/fleetlogs > "$fleet_logs"
    echo "done"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     putting connect files on jumpbox: "
    scp $SSH_OPTIONS "$docker_hosts" ec2-user@$STAX_PUB_IP:docker_hosts > /dev/null
    scp $SSH_OPTIONS "$router_hosts" ec2-user@$STAX_PUB_IP:router_docker_hosts > /dev/null
    scp $SSH_OPTIONS "$docker_connect" ec2-user@$STAX_PUB_IP:dockconnect > /dev/null
    scp $SSH_OPTIONS "$router_connect" ec2-user@$STAX_PUB_IP:routerdockconnect > /dev/null
    scp $SSH_OPTIONS "$fleet_stats" ec2-user@$STAX_PUB_IP:fleetstats > /dev/null
    scp $SSH_OPTIONS "$fleet_logs" ec2-user@$STAX_PUB_IP:fleetlogs > /dev/null
    ssh $SSH_OPTIONS ec2-user@$STAX_PUB_IP 'chmod 0755 dockconnect' > /dev/null
    ssh $SSH_OPTIONS ec2-user@$STAX_PUB_IP 'chmod 0755 routerdockconnect' > /dev/null
    ssh $SSH_OPTIONS ec2-user@$STAX_PUB_IP 'chmod 0755 fleetstats' > /dev/null
    ssh $SSH_OPTIONS ec2-user@$STAX_PUB_IP 'chmod 0755 fleetlogs' > /dev/null
    echo "done"
}

stax-connect(){
    ssh $SSH_OPTIONS ec2-user@$STAX_PUB_IP
}

stax-destroy-key(){
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     deleting $STAX_NAME key: "
    $aws ec2 delete-key-pair --key-name "$STAX_NAME" > /dev/null
    rm -f $STAX_KEY_FILE
    echo "done"
}

stax-destroy-files(){
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     deleting $STAX_NAME files: "
    rm -f "$STAX_DIR/$STAX_NAME"* "$STAX_NAME_FILE" > /dev/null
    echo "done"
}

stax-destroy-bucket(){
    if [ "$STAX_NAME" ]; then
        echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     removing $STAX_NAME s3 bucket: "
        $aws s3 rb --force "s3://$STAX_NAME" > /dev/null
        echo "done"
    fi
}

stax-destroy(){
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}   destroy stax"
    read -p "${yellow}[ ${cyan}????${yellow} ]${reset}     ok to destroy $STAX_NAME [y/n]? " answer
    if [[ $answer = y ]] ; then
        echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     destroying $STAX_NAME stax: "
        $aws cloudformation describe-stacks --stack-name $STAX_NAME > /dev/null && aws cloudformation delete-stack --stack-name $STAX_NAME 
        echo "done"
        stax-destroy-bucket
        stax-destroy-files
        stax-destroy-key
        echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     recording $STAX_NAME deletion time for audit: "
        touch $STAX_DIR/audit/`date +'%Y%m%d-%H%M%S'`-destroyed-$STAX_NAME
        echo "done"
        exit 0
    else
        echo "${yellow}[ ${cyan}----${yellow} ]${reset}     could not destroy $STAX_NAME, check name"
        exit 1
    fi
}

# bootstrap: set up STAX_NAME and config file
stax-generate(){
    stax_words="assets/stax/stax-words"
    NUMW=`wc -l < $stax_words`
    RANDOM_NAM=`head -$((${RANDOM} % ${NUMW} + 1)) $stax_words | tail -1`
    RANDOM_NUM=$((RANDOM%99999+10001))
    STAX_NAME="vpc-$STAX_PRE_NAME-$RANDOM_NUM-$RANDOM_NAM"
    # initialize sed command
    sed="sed -e s/@KEY_NAME@/$STAX_NAME/"
    # see if we need to substitute for SSH_FROM
    if grep -q SSH_FROM "$config" > /dev/null 2>&1; then
        SSH_FROM="$(curl -s http://icanhazip.com)\/32"
        if [ -z "$SSH_FROM" ]; then
            echo "$pkg: failed to get IP address for local machine"
            exit 1
        fi
        sed="$sed -e s/@SSH_FROM@/$SSH_FROM/"
    fi
    # see if we need to substitute for DISCOVERY_URL
    if grep -q DISCOVERY_URL "$config" > /dev/null 2>&1; then
        DISCOVERY_URL="$(curl -s http://discovery.etcd.io/new)"
        if [ -z "$DISCOVERY_URL" ]; then
            echo "$pkg: failed to get discovery URL"
            exit 1
        fi
        sed="$sed -e s|@DISCOVERY_URL@|$DISCOVERY_URL|"
    fi
    if ! $sed "$config" > "$config_tmp"; then
        echo "$pkg: sed failed to replace elements in $config: $sed"
        exit 1
    fi
}

# process positional parameters
command=
command_args=
prev_arg=
for arg
do
    if test -n "$prev_arg"; then
        eval "$prev_arg=\$arg"
        prev_arg=
        continue
    fi

    case "$arg" in
        -d | --debug | --debu | --deb | --de | -d)
            DEBUG="ON"
            ;;

        -h | --help | --hel | --he | --h)
            stax-usage
            exit 0;;

        -v | --version | --versio | --versi | --vers | --ver | --ve | --v)
            echo "$pkg $version"
            exit 0;;

        *)
            if [ -z "$command" ]; then
                command="$arg"
            elif [ -z "$command_args" ]; then
                command_args="$arg"
            else
                command_args="$command_args $arg"
            fi
            ;;

    esac
done

# generic setup
stax-colors
stax-logo
stax-preflight

if [ -f "$STAX_NAME_FILE" ]; then
    STAX_NAME=$(<$STAX_NAME_FILE)
    STAX_KEY="$STAX_NAME"
    STAX_KEY_FILE="$STAX_DIR/$STAX_NAME.pem"
    STAX_IPS_FILE="$STAX_DIR/$STAX_NAME.ips"
    SSH_OPTIONS="$SSH_OPTIONS -i $STAX_KEY_FILE"
fi

# process rest of command line arguments
if [ "$DEBUG" == "ON" ]; then echo "----- DEBUG :::: $command $command_args -----"; fi
case "$command" in
    connect)
        stax-existing
        stax-describe
        if [ ! -f "$STAX_IPS_FILE" ]; then
            stax-getip
            stax-pushkey
            stax-motd
            stax-popjumpbox
            stax-getdockerips
        fi
        STAX_PUB_IP=$(<$STAX_IPS_FILE)
        stax-connect
        ;;

    create)
        if [ -f $STAX_NAME_FILE ]; then
            echo "${yellow}[ ${red}ERRR${yellow} ]${reset} existing stax defined, exiting";
            exit 1
        fi
        stax-create
        stax-describe
        rm $config_tmp
        ;;

    desc-auto)
        stax-existing
        stax-descauto
        ;;

    desc*)
        stax-existing
        if [ ! -f $STAX_NAME_FILE ]; then
            echo "${yellow}[ ${red}ERRR${yellow} ]${reset} no stax defined, use create first"
            exit 1
        fi
        stax-describe
        ;;

    destroy)
        stax-existing
        stax-destroy
        ;;

    fleet)
        stax-existing
        if [ ! -f "$STAX_IPS_FILE" ]; then
            stax-getip
            stax-pushkey
            stax-motd
            stax-popjumpbox
            stax-getdockerips
        fi
        STAX_PUB_IP=$(<$STAX_IPS_FILE)
        stax-fleetstats
        ;;

    help)
        stax-usage
        exit 0
        ;;

    history)
        stax-history
        ;;

    list)
        stax-list
        ;;

    services)
        stax-services
        ;;

    start)
        if [[ ! "$2" ]]; then
            echo "${yellow}[ ${red}ERRR${yellow} ]${reset} no services listed, available ones are "
            stax-services
            exit 2
        fi
        stax-existing
        stax-getip
        if [ ! -f "$STAX_IPS_FILE" ]; then
            stax-pushkey
            stax-motd
            stax-popjumpbox
            stax-getdockerips
        fi
        sed "s|STAX_KEY|${STAX_KEY}|g" assets/stax/servicerunner > /tmp/servicerunner.tmp
        sed "s|SOME_SERVICE|`echo $2`|g" /tmp/servicerunner.tmp > /tmp/servicerunner
        stax-start-services
        ;;

    *)
        echo "${yellow}[ ${red}ERRR${yellow} ]${reset} unknown stax command: $1"
        stax-usage
        exit 2
        ;;

esac

exit 0
