#!/bin/bash

# this needs to (be converted to) go(lang)
set -e

#####################################################################
#   stax - builds a VPC in AWS - https://github.com/philcryer/stax
#   https://github.com/philcryer/stax/blob/master/LICENSE
#   this should work(tm)!                                  2015/01
#####################################################################

# make sure we are running under ssh-agent
if [[ ! $SSH_AUTH_SOCK ]]; then
    stax-logger "not running under ssh-agent, restarting with ssh-agent running"
    exec ssh-agent $0 "$@"
fi

# variables
pkg="stax"
version="0.1"
aws="aws --color on"
STAX_PRE_NAME="stax"
SCRIPT_PATH=$( cd $(dirname $0) ; pwd -P )
SYSTEM=`uname`
STAX_DIR="$HOME/.stax"
STAX_NAME_FILE="$STAX_DIR/stax-name"
STAX_LOG="$STAX_DIR/stax.log"
SSH_OPTIONS="-q"
host=`hostname`
logdir=/tmp
jq=assets/jq/$SYSTEM/jq

# set colors
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
purple=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
reset=$(tput sgr0)

stax-message(){
    msg="$1"
    shift
    pref="----"
    if [[ $1 ]]; then
        pref="${1:0:4}"
        shift
    fi
    echo "${yellow}[ $cyan$pref$yellow ]$reset  $msg"
    stax-logger "INFO: $msg"
}

stax-error(){
    msg="$1"
    echo "${yellow}[ ${red}ERRR$yellow ]$reset  $msg"
    stax-logger "ERROR: $msg"
}

stax-error-exit(){
    msg="$1"
    status="$2"
    stax-error "$msg"
    exit $status
}

stax-logger(){
    msg="$1"
    if [[ ! $STAX_LOG ]]; then
        echo "$pkg: cannot call stax-logger with STAX_LOG undefined"
        exit 5
    fi
    echo "$(date +'%b %d %T') $host $pkg: $msg" >> "$STAX_LOG"
}

stax-usage(){
    cat <<EOM
Usage: stax [OPTIONS] <command>

Options:
  -c,--config=CONFIG   Use file CONFIG rather than config/config.json
  -d,--debug           Turn on verbose messages
  -h,--help            Output this message
  -v,--version         Print name and version information

If an argument is required for a long option, so to the short. Same for
optional arguments.

Commands:
  connect [target]  Connect to jump|router|service in the VPC stax over SSH
  create            Create a new VPC stax in AWS
  describe          Describe the stax created from this host
  destroy           Destroy the existing VPC stax
  fleet             Run various fleetctl commands against the fleet cluster
  help              Output this message
  history           View history of recently created/destroyed stax
  list              List all completely built and running stax
  services          List servers that are available to run across a stax
  start <service>   Start a service across the stax cluster
  test              Automated test to exercise functionality of stax

For more help, check the docs: https://github.com/philcryer/stax
EOM
}

## FIXME broken or unused commands, fix or remove?
#desc-auto         Describe the autoscaling groups in the stax
#validate          Validate JSON - DRY RUN, nothing applied

stax-logo(){
NUMS=`wc -l < assets/stax/slogans`
    echo "${green}     _             "
    echo "    | | ${yellow}`head -$((${RANDOM} % ${NUMS} + 1)) assets/stax/slogans | tail -1`${green}"
    echo " ___| |_ __ ___  __"
    echo '/ __| __/ _` \ \/ /'
    echo '\__ \ || (_| |>  < '
    echo "|___/\__\__,_/_/\_\ ${reset}"
    echo
}

stax-preflight(){
    # check for required cli tools
    for cli in aws ssh; do
        if ! type "$cli" > /dev/null 2>&1; then
            echo "$pkg: $cli is not in the PATH. Aborting."
            exit 1
        fi
    done
    # check if awscli tools are configured
    if [ ! -f "$HOME/.aws/config" ]; then
        echo "awscli not configured, run 'aws configure'. Aborting."
        exit 1
    fi
    # create a dir to store stax stuff
    if [ ! -d "$STAX_DIR" ]; then
        echo "creating directory $STAX_DIR"
        mkdir -p "$STAX_DIR"
    fi
    if ! chmod 700 "$STAX_DIR"; then
        echo "$pkg: failed to chmod $STAX_DIR"
        exit 1
    fi
    # verify config is filled out
    if [ ! -f "$config" ]; then
        echo "$pkg: $config does not exist, configuration required"
        echo "$pkg: copy example to config directory, configure it and run again."
        echo "    $ cp $config.example $config"
        echo "$pkg: Aborting."
        exit 1
    fi
    # create audit dir for stax    
    if [[ ! -d $STAX_DIR/audit ]]; then
        mkdir -p $STAX_DIR/audit
    fi
}

stax-validate(){
    template="$1"
    echo "$template"
    if ! $aws cloudformation validate-template --template-url "$template" > /dev/null; then
        stax-error "template failed to validate, exiting"
        stax-destroy-bucket
        stax-destroy-key
        stax-destroy-files
        exit 2
    fi
}

stax-create-key(){
    stax-message "creating ssh key pair in aws"
    STAX_KEY="$STAX_NAME"
    STAX_PRIV_KEY="$STAX_DIR/$STAX_NAME.pem"
    STAX_PUB_KEY="$STAX_PRIV_KEY.pub"
    touch "$STAX_PRIV_KEY"
    chmod 600 "$STAX_PRIV_KEY"
    stax-message "  creating key pair"
    if ! $aws ec2 create-key-pair --key-name "$STAX_NAME" --query 'KeyMaterial' --output text > "$STAX_PRIV_KEY"; then
        stax-error-exit "failed to create key pair in aws" 1
    fi
    stax-message "  key pair created"
    stax-message "  generating public key"
    if ! ssh-keygen -y -f "$STAX_PRIV_KEY" > "$STAX_PUB_KEY"; then
        stax-message-exit "failed to generate public key from private key: $STAX_PRIV_KEY $STAX_PUB_KEY" 1
    fi
    stax-message "  public key generated"
    stax-ssh-key-add
}

stax-create-bucket(){
    bucket="$1"
    stax-message "creating bucket"
    $aws s3 mb "s3://$bucket" > /dev/null
    stax-message "bucket created"
}

stax-create(){
    if [[ -f $STAX_NAME_FILE ]]; then
        existing_name=$(<$STAX_NAME_FILE)
        stax-error-exit "existing stax defined: $existing_name" 1
    fi
    stax-generate
    stax-message "$STAX_NAME" "NAME"
    stax-message "creating stax"
    stax-config
    stax-create-key
    stax-create-bucket "$STAX_NAME"
    # upload template to s3 to have bigger size limits
    template="$STAX_NAME/$STAX_NAME.json"
    template_url="https://s3.amazonaws.com/$template"
    stax-message "  uploading template"
    $aws s3 cp "$SCRIPT_PATH/templates/cloudformation-template-vpc.json" "s3://$template" > /dev/null
    stax-message "  template uploaded"
    stax-message "  validating template"
    if ! stax-validate "$template_url" > /dev/null; then
        stax-error "validation failed, exiting"
        stax-destroy-bucket
        stax-destroy-key
        exit 2
    fi
    stax-message "  validation successful"
    # upload vpc assets
    stax-message "  uploading vpc assets"
    for f in assets/vpc/*; do
        $aws s3 cp "$f" "s3://$STAX_NAME/" > /dev/null
    done
    stax-message "  vpc assets uploaded"
    echo $STAX_NAME > $STAX_NAME_FILE
    stax-message "  creating stax in aws"
    if $aws cloudformation create-stack \
        --stack-name $STAX_NAME \
        --template-url "$template_url" \
        --parameters "$(<$STAX_PARAMS)" \
        --capabilities CAPABILITY_IAM > /dev/null
    then
        stax-message "  stax creation complete"
        # new 'audit' functionality, save names and create date of stax you've created
        # if useful, we could save this to S3: and make it persist (well sure, uh, or the fax)
        if [[ ! -d $STAX_DIR/audit/$STAX_NAME/ ]]; then
            mkdir -p $STAX_DIR/audit/$STAX_NAME
        fi
        touch $STAX_DIR/audit/$STAX_NAME/`date +'%Y%m%d-%H%M%S'`-created
    else
        stax-error "creation failed, exiting"
        stax-destroy-bucket
        stax-destroy-key
        stax-destroy-files
        exit 2
    fi
}

stax-ssh-config(){
    stax-message "creating ssh_config"
    STAX_SSH_CONFIG="$STAX_DIR/$STAX_NAME.ssh_config"
    stax-message "  randomizing router and service hosts"
    rhosts="$STAX_DIR/$STAX_NAME.router_hosts"
    shosts="$STAX_DIR/$STAX_NAME.service_hosts"
    if [[ ! -f $rhosts ]]; then
        stax-error-exit "missing router host file: $rhosts" 5
    fi
    if [[ ! -f $shosts ]]; then
        stax-error-exit "missing service host file: $shosts" 5
    fi
    router_ip=$(head -n $(($RANDOM % $(wc -l < $rhosts) + 1)) $rhosts | tail -n 1)
    service_ip=$(head -n $(($RANDOM % $(wc -l < $shosts) + 1)) $shosts | tail -n 1)
    stax-message "  writing $STAX_SSH_CONFIG"
    cat > "$STAX_SSH_CONFIG" <<EOF
ForwardAgent yes
ForwardX11 no
UserKnownHostsFile /dev/null
StrictHostKeyChecking no
ServerAliveInterval 60
ServerAliveCountMax 30
TCPKeepAlive no
IdentityFile $STAX_PRIV_KEY

Host jump
  User ec2-user
  HostName $STAX_PUB_IP

Host router
  User core
  HostName $router_ip
  ProxyCommand ssh -q -F $STAX_SSH_CONFIG jump nc -w 120 %h %p

Host service
  User core
  HostName $service_ip
  ProxyCommand ssh -q -F $STAX_SSH_CONFIG jump nc -w 120 %h %p
EOF
    stax-message "  created $STAX_SSH_CONFIG"
    SSH_OPTIONS="$SSH_OPTIONS -F $STAX_SSH_CONFIG"
}

# ensure there is a stax
stax-existing(){
    if [[ ! -f $STAX_NAME_FILE ]]; then
        stax-error-exit "no stax defined, use create first" 1
    fi
    # define all the global variables
    STAX_NAME=$(<$STAX_NAME_FILE)
    STAX_DESC="$STAX_DIR/$STAX_NAME.json"
    STAX_PARAMS="$STAX_DIR/$STAX_NAME.params"
    STAX_KEY="$STAX_NAME"
    STAX_PRIV_KEY="$STAX_DIR/$STAX_NAME.pem"
    STAX_PUB_KEY="$STAX_PRIV_KEY.pub"
    STAX_JUMP_FILE="$STAX_DIR/$STAX_NAME.jump"
    STAX_SSH_CONFIG="$STAX_DIR/$STAX_NAME.ssh_config"
    SSH_OPTIONS="$SSH_OPTIONS -F $STAX_SSH_CONFIG"
    # add the ssh key to the ssh agent
}

# save the description of the stax to a file
stax-describe(){
    if [[ -z $STAX_NAME ]]; then
        stax-error-exit "cannot call stax-describe with STAX_NAME undefined" 5
    fi
    stax-message "$STAX_NAME" "NAME"
    stax-message "describe stax"
    stax-message "  querying aws"
    STAX_DESC="$STAX_DIR/$STAX_NAME.json"
    if aws cloudformation describe-stacks --stack-name "$STAX_NAME" > "$STAX_DESC"; then
        stax-message "  query complete"
        stax-message "  see $STAX_DESC for details"
    else
        stax-error-message "failed to get stax information from aws"
        stax-destroy-bucket
        stax-destroy-key
        stax-destroy-files
        exit 1
    fi
}

# ensure stax creation is complete
stax-complete(){
    wait="$1"
    stax-message "checking if stax build is complete"
    until stax-describe && grep -q 'StackStatus.*CREATE_COMPLETE' "$STAX_DESC" > /dev/null 2>&1; do
        status=$($jq '.Stacks[].StackStatus' "$STAX_DESC")
        stax-message "  stax build not complete: $status"
        if [[ $wait ]]; then
            stax-message "  waiting..."
        else
            exit 1
        fi
        sleep 30
    done
}

stax-list(){
    stax-message "list currently running stax"
    stax-message "  querying aws "
    echo "{"
    # list running stax
    $aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE | $jq '.StackSummaries[].StackName' | grep "vpc-stax" | cut -d"\"" -f2 > /tmp/run.list
    ls -1 $STAX_DIR/audit > /tmp/hist.list
    # put a * by one if it was launched from here
    for f in `cat /tmp/run.list`;
        do echo -n $f && if grep $f /tmp/hist.list > /dev/null; then echo " *"; else echo; fi;
    done
    rm /tmp/hist.list /tmp/run.list
    echo "}"
}

stax-services(){
    stax-message "services that stax can run on the cluster"
    echo "{"
    ls -1 assets/services/*service | cut -d"/" -f3 | cut -d"." -f1
    echo "}"
}

stax-start-service(){
    if [ -z "$1" ]; then
        stax-error-exit "you must provide a service name, exiting" 2
    fi
    service="$1"
    service_file="assets/services/$service.service"
    service_basename=${service_file##*/}
    if [[ ! -f $service_file ]]; then
        stax-error-exit "unknown service: $service" 1
    fi
    stax-message "starting $service on the stax service cluster"
    stax-message "  copying $service_file to service docker host"
    scp_cmd="scp $SSH_OPTIONS $service_file service:$service_basename"
    if ! $scp_cmd; then
        stax-error-exit "failed to copy service file to service docker host: $scp_cmd" 1
    fi
    stax-message "  submitting service $service to fleet"
    submit_cmd="ssh $SSH_OPTIONS service fleetctl submit $service_basename"
    if ! $submit_cmd; then
        stax-error-exit "failed to submit service to docker host: $submit_cmd" 1
    fi
    stax-message "  starting service $service in fleet"
    start_cmd="ssh $SSH_OPTIONS service fleetctl start $service_basename"
    if ! $start_cmd; then
        stax-error-exit "failed to start service to docker host: $start_cmd" 1
    fi
    if [[ ! -d $STAX_DIR/audit/$STAX_NAME/ ]]; then
        mkdir -p $STAX_DIR/audit/$STAX_NAME
    fi
    touch "$STAX_DIR/audit/$STAX_NAME/$(date +'%Y%m%d-%H%M%S')-fleetctl-started-service-$service"
    sleep 5
}

stax-fleetstats(){
    stax-message "status from fleetctl on the cluster: "
    stax-connect service fleetctl list-machines
    stax-connect service fleetctl list-units
    stax-connect service fleetctl list-unit-files
}

stax-descauto(){
    echo "${yellow}[ ${cyan}NAME${yellow} ]${reset} $STAX_NAME"
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}   define autoscaling policies"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     querying aws "
    aws autoscaling describe-auto-scaling-groups | grep "arn:aws:autoscaling" | grep `cat $STAX_NAME_FILE` | cut -d"/" -f2 | cut -d"\"" -f1 > /tmp/asg; 
    echo "done"
    aws autoscaling describe-policies --auto-scaling-group-name `cat /tmp/asg`
    rm /tmp/asg
    exit 0
}

stax-history(){
    stax-message "history"
    if [ ! -d $STAX_DIR/audit ]; then
        mkdir -p $STAX_DIR/audit
    fi
    stax-message "  recently created and destoryed stax"
    echo "{"
    ls -1R ~/.stax/audit | cut -d"/" -f6 | sed -e "1d"
    echo "}"
}

stax-jumpip(){
    stax-message "getting public IP (EIP)"
    STAX_JUMP_FILE="$STAX_DIR/$STAX_NAME.jump"
    STAX_PUB_IP=$(grep -B2 -A2 'JumpEIP' "$STAX_DIR/$STAX_NAME.json" | grep -o '[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*')
    stax-message "  public IP (EIP): $STAX_PUB_IP"
    stax-message "  writing to $STAX_JUMP_FILE"
    echo "$STAX_PUB_IP" > "$STAX_JUMP_FILE"
}

stax-motd(){
    stax-message "creating motd"
    now=$(date)
    motd="$STAX_DIR/$STAX_NAME.motd"
    cat > "$motd" <<'EOF'
     _
    | | welcome to the jumpbox
 ___| |_ __ ___  __
/ __| __/ _` \ \/ /
\__ \ || (_| |>  <
|___/\__\__,_/_/\_\

EOF
    cat >> "$motd" <<EOF
IP        $STAX_PUB_IP
Name      $STAX_NAME_FILE
Built     $now

EOF
}

stax-popjumpbox(){
    stax-message "setup motd and bashrc on jumpbox"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     pushing motd to $STAX_PUB_IP: "
    motd="$STAX_DIR/$STAX_NAME.motd"
    if [[ ! -f $motd ]]; then
        stax-error-exit "motd file not found: $motd" 1
    fi
    scp $SSH_OPTIONS "$motd" jump:motd > /dev/null
    echo "done"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     pushing bashrc to $STAX_PUB_IP: "
    scp $SSH_OPTIONS assets/stax/bashrc jump:.bashrc > /dev/null
    echo "done"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     copying service definitions to $STAX_PUB_IP: "
    scp $SSH_OPTIONS -r assets/services jump: > /dev/null
    echo "done"
}

stax-getdockerips(){
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}   get docker IP(s)"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     querying aws "
    service_hosts="$STAX_DIR/$STAX_NAME.service_hosts"
    # this will not print the IP address of a host if it is the last host in the list
    aws ec2 describe-instances --output text --query 'Reservations[*].Instances[*]' | awk "\$1 == \"0\" { if (ip != \"\" && name == \"container-$STAX_NAME\") print ip; ip = \"\" } \$1 == \"PRIVATEIPADDRESSES\" { ip = \$NF } \$1 == \"TAGS\" && \$2 == \"Name\" { name = \$3 }" > "$service_hosts"
    router_hosts="$STAX_DIR/$STAX_NAME.router_hosts"
    aws ec2 describe-instances --output text --query 'Reservations[*].Instances[*]' | awk "\$1 == \"0\" { if (ip != \"\" && name == \"router-$STAX_NAME\") print ip; ip = \"\" } \$1 == \"PRIVATEIPADDRESSES\" { ip = \$NF } \$1 == \"TAGS\" && \$2 == \"Name\" { name = \$3 }" > "$router_hosts"
    echo "done"
}

stax-ssh-key-add(){
    stax-message "adding private key to ssh-agent"
    if [[ ! $STAX_PRIV_KEY ]]; then
        stax-error-exit "cannot call stax-ssh-key-add when STAX_PRIV_KEY undefined" 5
    fi
    if ! ssh-add "$STAX_PRIV_KEY" > /dev/null 2>&1; then
        stax-error-exit "failed to add private key to ssh-agent: $STAX_PRIV_KEY" 1
    fi
    stax-message "  private key added"
}

stax-ssh-key-remove(){
    stax-message "removing private key from ssh-agent"
    if [[ ! $STAX_PUB_KEY ]]; then
        stax-error-exit "cannot call stax-ssh-key-remove when STAX_PUB_KEY undefined" 5
    fi
    if ! ssh-add -d "$STAX_PUB_KEY" > /dev/null 2>&1; then
        stax-error "failed to remove private key from ssh-agent: $STAX_PUB_KEY"
        stax-error "you will have to remove it yourself, continuing"
    fi
    stax-message "  private key removed"
}

stax-connect(){
    stax-message "connecting to stax"
    target="jump"
    if [[ $1 ]]; then
        target="$1"
        shift
        case "$target" in
            jump|router|service)
                :;;
            *)
                stax-error-exit "unknown connection target: $target" 1
                ;;
        esac
    fi
    ssh_cmd="ssh $SSH_OPTIONS $target $@"
    if ! $ssh_cmd; then
        stax-error "ssh command failed: $ssh_cmd"
        exit 1
    fi
}

stax-destroy-key(){
    stax-message "destroying $STAX_NAME key"
    stax-ssh-key-remove
    stax-message "  deleting $STAX_NAME key from aws"
    $aws ec2 delete-key-pair --key-name "$STAX_NAME" > /dev/null
    rm -f $STAX_PUB_KEY $STAX_PRIV_KEY
}

stax-destroy-files(){
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     deleting $STAX_NAME files: "
    rm -f "$STAX_DIR/$STAX_NAME"* "$STAX_NAME_FILE" > /dev/null
    echo "done"
}

stax-destroy-bucket(){
    if [ "$STAX_NAME" ]; then
        echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     removing $STAX_NAME s3 bucket: "
        $aws s3 rb --force "s3://$STAX_NAME" > /dev/null
        echo "done"
    fi
}

stax-destroy(){
    confirmed="$1"
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}   destroy stax"
    if [[ -z $confirmed ]]; then
        read -p "${yellow}[ ${cyan}????${yellow} ]${reset}     ok to destroy $STAX_NAME [y/n]? " answer
        if [[ $answer != y ]] ; then
            stax-message "will not destroy $STAX_NAME"
            exit 0
        fi
    fi
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     destroying $STAX_NAME stax: "
    if $aws cloudformation delete-stack --stack-name $STAX_NAME; then
        echo "done"
        stax-message "recording $STAX_NAME deletion time for audit"
        touch $STAX_DIR/audit/$STAX_NAME/`date +'%Y%m%d-%H%M%S'`-destroyed
        stax-destroy-bucket
        stax-destroy-key
        stax-destroy-files
    else
        echo "failed"
        stax-error-exit "you will need to clean up the stack, key, bucket, and files" 1
    fi
}

# bootstrap: set up STAX_NAME and config file
stax-generate(){
    stax_words="assets/stax/words"
    NUMW=`wc -l < $stax_words`
    RANDOM_NAM=`head -$((${RANDOM} % ${NUMW} + 1)) $stax_words | tail -1`
    RANDOM_NUM=$((RANDOM%99999+10001))
    STAX_NAME="vpc-$STAX_PRE_NAME-$RANDOM_NUM-$RANDOM_NAM"
}

# generate parameters file
stax-config(){
    stax-message "creating parameter file"
    # initialize sed command
    sed="sed -e s/@KEY_NAME@/$STAX_NAME/"
    # check what subsitutions need to be done
    if grep -q '@OWNER@' "$config" > /dev/null 2>&1; then
        owner="$(id -u -n)"
        if [[ -z $owner ]]; then
            stax-error-exit "failed to determine user" 1
        fi
        sed="$sed -e s/@OWNER@/$owner/"
    fi
    if grep -q '@SSH_FROM@' "$config" > /dev/null 2>&1; then
        SSH_FROM="$(curl -s http://icanhazip.com)/32"
        if [ -z "$SSH_FROM" ]; then
            stax-error-exit "failed to get IP address for local machine" 1
        fi
        sed="$sed -e s|@SSH_FROM@|$SSH_FROM|"
    fi
    if grep -q '@HTTP_FROM@' "$config" > /dev/null 2>&1; then
        # same as SSH_FROM
        sed="$sed -e s|@HTTP_FROM@|$SSH_FROM|"
    fi
    if grep -q '@DISCOVERY_URL@' "$config" > /dev/null 2>&1; then
        DISCOVERY_URL="$(curl -s http://discovery.etcd.io/new)"
        if [[ -z $DISCOVERY_URL || $DISCOVERY_URL == 'Unable to generate token' ]]; then
            stax-error-exit "failed to get discovery URL" 1
        fi
        sed="$sed -e s|@DISCOVERY_URL@|$DISCOVERY_URL|"
    fi
    STAX_PARAMS="$STAX_DIR/$STAX_NAME.params"
    if ! $sed "$config" > "$STAX_PARAMS"; then
        stax-error-exit "sed failed to replace elements in $config: $sed" 1
    fi
}

# automated test
stax-test(){
    stax-message "running stax test"
    stax-message "  create dummy parameter config"
    user=$(id -u -n)
    config="/tmp/test-config-$user-$$-$RANDOM.json"
    cat > "$config" <<EOF
[
  { "ParameterKey": "App",                 "ParameterValue": "Stax Auto Test" },
  { "ParameterKey": "Group",               "ParameterValue": "ITSA" },
  { "ParameterKey": "CostCenter",          "ParameterValue": "5180-9130-SLR74733" },
  { "ParameterKey": "DockerRegistryUser",  "ParameterValue": "nobody" },
  { "ParameterKey": "DockerRegistryPass",  "ParameterValue": "notapassword" },
  { "ParameterKey": "DockerRegistryEmail", "ParameterValue": "nobody@dev.null" },
  { "ParameterKey": "DockerInstanceType",  "ParameterValue": "t2.micro" },
  { "ParameterKey": "Owner",               "ParameterValue": "@OWNER@" },
  { "ParameterKey": "KeyName",             "ParameterValue": "@KEY_NAME@" },
  { "ParameterKey": "AllowSSHFrom",        "ParameterValue": "@SSH_FROM@" },
  { "ParameterKey": "AllowHTTPFrom",       "ParameterValue": "@HTTP_FROM@" },
  { "ParameterKey": "DiscoveryURL",        "ParameterValue": "@DISCOVERY_URL@" }
]
EOF
    stax-create
    rm -f "$config"
    stax-existing
    stax-motd
    # wait while it is building
    stax-complete 1
    stax-jumpip
    stax-getdockerips
    stax-ssh-config
    stax-popjumpbox
    stax-message "  getting jump box hostname"
    stax-connect jump hostname
    stax-message "  giving docker containers some time to spin up"
    sleep 300
    for t in router service; do
        stax-message "  getting docker images on $t"
        stax-connect $t docker images
        stax-message "  getting docker containers on $t"
        stax-connect $t docker ps
    done
    stax-message "  listing machines in fleet cluster"
    stax-connect service fleetctl list-machines
    stax-message "  getting consul cluster members"
    stax-connect router docker exec consul consul members

    #jump_hostname=$(stax-connect jump hostname)
    #stax-message "  jump box hostname: $jump_hostname"
    #consul_members=$(stax-connect router docker exec consul consul members)
    #stax-message "  consul cluster members: $consul_members"
    # systemctl status consul
    # journalctl -u consul
    # curl localhost:8500/v1/catalog/nodes
    # start httpbin
    # curl ELB/httpbin/get
    # fleetctl list-

    stax-destroy 1
}

# process positional parameters
config="config/config.json"
sub_cmd=
sub_cmd_args=
prev_arg=
for arg
do
    if test -n "$prev_arg"; then
        eval "$prev_arg=\$arg"
        prev_arg=
        continue
    fi

    case "$arg" in
        -*=*) optarg=`echo "$arg" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
        *) optarg= ;;
    esac

    case "$arg" in
        -c | --config | --confi | --conf | --con | --co | --c)
            prev_arg=config
            ;;

        --config=* | --confi=* | --conf=* | --con=* | --co=* | --c=*)
            config="$optarg"
            ;;

        -d | --debug | --debu | --deb | --de | -d)
            DEBUG="ON"
            ;;

        -h | --help | --hel | --he | --h)
            stax-usage
            exit 0;;

        -v | --version | --versio | --versi | --vers | --ver | --ve | --v)
            echo "$pkg $version"
            exit 0;;

        -*)
            if [[ "$sub_cmd_args" ]]; then
                sub_cmd_args="$sub_cmd_args $arg"
            else
                echo "$pkg: unknown option: $arg"
                echo "$pkg: Try '$pkg --help' for help."
                exit 1
            fi
            ;;

        *)
            if [[ -z $sub_cmd ]]; then
                sub_cmd="$arg"
            elif [[ -z $sub_cmd_args ]]; then
                sub_cmd_args="$arg"
            else
                sub_cmd_args="$sub_cmd_args $arg"
            fi
            ;;

    esac
done

# make sure a command was provided
if [[ -z $sub_cmd ]]; then
    stax-usage
    exit 2
fi

# generic setup
stax-logo
stax-preflight

# determine which subcommand to run
if [ "$DEBUG" == "ON" ]; then echo "----- DEBUG :::: $sub_cmd $sub_cmd_args -----"; fi
case "$sub_cmd" in
    connect)
        stax-existing
        stax-complete
        if [[ ! -f $STAX_JUMP_FILE ]]; then
            stax-jumpip
            stax-getdockerips
            stax-ssh-config
            stax-popjumpbox
        fi
        STAX_PUB_IP=$(<$STAX_JUMP_FILE)
        stax-connect $sub_cmd_args
        ;;

    create)
        stax-create
        stax-existing
        stax-motd
        stax-describe
        ;;

    desc-auto)
        stax-existing
        stax-descauto
        ;;

    desc*)
        stax-existing
        stax-describe
        ;;

    destroy)
        stax-existing
        stax-destroy $sub_cmd_args
        ;;

    fleet)
        stax-existing
        stax-complete
        if [ ! -f "$STAX_JUMP_FILE" ]; then
            stax-jumpip
            stax-getdockerips
            stax-ssh-config
            stax-popjumpbox
        fi
        STAX_PUB_IP=$(<$STAX_JUMP_FILE)
        stax-fleetstats
        ;;

    help)
        stax-usage
        ;;

    history)
        stax-history
        ;;

    list)
        stax-list
        ;;

    services)
        stax-services
        ;;

    start)
        if [[ ! $sub_cmd_args ]]; then
            stax-error "no services listed, available ones are"
            stax-services
            exit 2
        fi
        stax-existing
        stax-complete
        if [ ! -f "$STAX_JUMP_FILE" ]; then
            stax-jumpip
            stax-getdockerips
            stax-ssh-config
            stax-popjumpbox
        fi
        for service in $sub_cmd_args; do
            stax-start-service "$service"
        done
        stax-fleetstats
        ;;

    test)
        stax-test
        ;;

    validate)
        stax-validate
        ;;

    *)
        stax-error "unknown stax command: $sub_cmd"
        stax-usage
        exit 2
        ;;

esac

exit 0
