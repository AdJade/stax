#!/bin/bash

# this needs to go
set -e

#####################################################################
#   stax - builds a VPC in AWS - https://github.com/philcryer/stax
#   https://github.com/philcryer/stax/blob/master/LICENSE
#   this should work(tm)!                                  2015/01
#####################################################################

pkg="stax"
version="0.1"
STAX_PRE_NAME="stax"
SCRIPT_PATH=$( cd $(dirname $0) ; pwd -P )
SYSTEM=`uname`
aws="aws --color on"
STAX_DIR="$HOME/.stax"
STAX_NAME_FILE="$STAX_DIR/stax-name"
SSH_OPTIONS="-q -x -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

stax-colors(){
    red=$(tput setaf 1)
    green=$(tput setaf 2)
    yellow=$(tput setaf 3)
    blue=$(tput setaf 4)
    purple=$(tput setaf 5)
    cyan=$(tput setaf 6)
    white=$(tput setaf 7)
    reset=$(tput sgr0)
}

stax-message(){
    msg="$1"
    shift
    pref="----"
    if [[ $1 ]]; then
        pref="${1:0:4}"
        shift
    fi
    echo_args="$@"
    echo $echo_args "${yellow}[ $cyan$pref$yellow ]$reset  $msg"
}

stax-error(){
    msg="$1"
    echo "${yellow}[ ${red}ERRR$yellow ]$reset  $msg"
}

stax-error-exit(){
    msg="$1"
    status="$2"
    stax-error "$msg"
    exit $status
}

stax-usage(){
    cat <<EOM
Usage: stax [OPTIONS] <command>

Options:
  -c,--config=CONFIG   Use file CONFIG rather than config/config.json
  -d,--debug           Turn on verbose messages
  -h,--help            Output this message
  -v,--version         Print name and version information

If an argument is required for a long option, so to the short. Same for
optional arguments.

Commands:
  connect           Connect to the jumpbox in the VPC stax over SSH
  create            Create a new VPC stax in AWS
  describe          Describe the stax created from this host
  desc-auto         Describe the autoscaling groups in the stax
  destroy           Destroy the existing VPC stax
  fleet             Run various fleetctl commands against the fleet cluster
  help              Output this message
  history           View history of recently created/destroyed stax
  list              List all completely built and running stax
  services          List servers that are available to run across a stax
  start <service>   Start a service across the stax cluster
  test              Automated test to exercise functionality of stax

For more help, check the docs: https://github.com/philcryer/stax
EOM
}

stax-logo(){
NUMS=`wc -l < assets/stax/stax-slogans`
    echo "${green}     _             "
    echo "    | | ${yellow}`head -$((${RANDOM} % ${NUMS} + 1)) assets/stax/stax-slogans | tail -1`${green}"
    echo " ___| |_ __ ___  __"
    echo '/ __| __/ _` \ \/ /'
    echo '\__ \ || (_| |>  < '
    echo "|___/\__\__,_/_/\_\ ${reset}"
    echo
}

stax-preflight(){
    # check for required cli tools
    for cli in aws ssh; do
        if ! type "$cli" > /dev/null 2>&1; then
            echo "$pkg: $cli is not in the PATH. Aborting."
            exit 1
        fi
    done
    if [ ! -f "$HOME/.aws/config" ]; then
        echo "awscli not configured, run 'aws configure'. Aborting."
        exit 1
    fi
    if [ ! -d "$STAX_DIR" ]; then
        echo "creating directory $STAX_DIR"
        mkdir -p "$STAX_DIR"
    fi
    if ! chmod 700 "$STAX_DIR"; then
        echo "$pkg: failed to chmod $STAX_DIR"
        exit 1
    fi
    if [ ! -f "$config" ]; then
        echo "$pkg: $config does not exist, configuration required"
        echo "$pkg: copy example to config directory, configure it and run again."
        echo "    $ cp $config.example $config"
        echo "$pkg: Aborting."
        exit 1
    fi
}

stax-validate(){
    template="$1"
    echo "$template"
    if ! $aws cloudformation validate-template --template-url "$template" > /dev/null; then
        stax-error "template failed to validate, exiting"
        stax-destroy-bucket
        stax-destroy-files
        stax-destroy-key
        exit 2
    fi
}

stax-create-key(){
    STAX_KEY="$STAX_NAME"
    STAX_KEY_FILE="$STAX_DIR/$STAX_NAME.pem"
    touch "$STAX_KEY_FILE"
    chmod 600 "$STAX_KEY_FILE"
    # this would be better if we had a real json parser
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     creating key pair: "
    $aws ec2 create-key-pair --key-name "$STAX_NAME" --query 'KeyMaterial' --output text > "$STAX_KEY_FILE"
    echo "done"
}

stax-create-bucket(){
    bucket="$1"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     creating bucket: "
    $aws s3 mb "s3://$bucket" > /dev/null
    echo "done"
}

stax-create(){
    if [ -f $STAX_NAME_FILE ]; then
        existing_name=$(<$STAX_NAME_FILE)
        stax-error-exit "existing stax defined: $existing_name" 1
    fi
    stax-generate
    echo "${yellow}[ ${cyan}NAME${yellow} ]${reset} $STAX_NAME"
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}   creating stax"
    stax-config
    stax-create-key
    stax-create-bucket "$STAX_NAME"
    # upload template to s3 to have bigger size limits
    template="$STAX_NAME/$STAX_NAME.json"
    template_url="https://s3.amazonaws.com/$template"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     uploading template: "
    $aws s3 cp "$SCRIPT_PATH/templates/cloudformation-template-vpc.json" "s3://$template" > /dev/null
    echo "done"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     validating template: "
    if ! stax-validate "$template_url" > /dev/null; then
        stax-error "validation failed, exiting"
        stax-destroy-bucket
        stax-destroy-key
        exit 2
    fi
    echo "done"
    # upload vpc assets
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     uploading vpc assets: "
    for f in assets/vpc/*; do
        $aws s3 cp "$f" "s3://$STAX_NAME/" > /dev/null
    done
    echo "done"
    echo $STAX_NAME > $STAX_NAME_FILE
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}     creating vpc in aws"
    if $aws cloudformation create-stack \
        --stack-name $STAX_NAME \
        --template-url "$template_url" \
        --parameters "$(<$STAX_PARAMS)" \
        --capabilities CAPABILITY_IAM > /dev/null
    then
        echo "${yellow}[ ${cyan}----${yellow} ]${reset}   stax creation complete"
        # new 'audit' functionality, save names and create date of stax you've created
        # if useful, we could save this to S3: and make it persist
        if [[ ! -d $STAX_DIR/audit ]]; then
            mkdir -p $STAX_DIR/audit
        fi
        touch $STAX_DIR/audit/`date +'%Y%m%d-%H%M%S'`-created-$STAX_NAME
    else
        stax-error "creation failed, exiting"
        stax-destroy-bucket
        stax-destroy-files
        stax-destroy-key
        exit 2
    fi
}

# ensure there is a stax
stax-existing(){
    if [[ ! -f $STAX_NAME_FILE ]]; then
        stax-error-exit "no stax defined, use create first" 1
    fi
    STAX_EXIST=$(<$STAX_NAME_FILE)
}

# save the description of the stax to a file
stax-describe(){
    if [ -z "$STAX_NAME" ]; then
        echo "$pkg: cannot call stax-describe with STAX_NAME undefined"
        exit 5
    fi
    echo "${yellow}[ ${cyan}NAME${yellow} ]${reset} $STAX_NAME"
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}   describe stax"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     querying aws: "
    STAX_DESC="$STAX_DIR/$STAX_NAME.json"
    if aws cloudformation describe-stacks --stack-name "$STAX_NAME" > "$STAX_DESC"; then
        echo "done"
        echo "${yellow}[ ${cyan}----${yellow} ]${reset}     see $STAX_DIR/$STAX_NAME.json for details"
    else
        echo "failed"
        echo "${yellow}[ ${cyan}----${yellow} ]${reset} stax $STAX_NAME does not exist in AWS"
        stax-destroy-bucket
        stax-destroy-files
        stax-destroy-key
        exit 1
    fi
}

# ensure stax creation is complete
stax-complete(){
    wait="$1"
    until stax-describe && grep -q CREATE_COMPLETE "$STAX_DESC" > /dev/null 2>&1; do
        echo "${yellow}[ ${cyan}NULL${yellow} ]${reset}     stax creation not complete"
        if [[ -z $wait ]]; then
            exit 1
        fi
        sleep 60
    done
}

stax-list(){
    stax-message "list running stax"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     querying aws: "
    stacks=$(aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE)
    echo "done"
    echo "$stacks"
}

stax-services(){
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}   services that stax can run on the cluster"
    echo "{"
    ls -1 assets/services/*service | cut -d"/" -f3 | cut -d"." -f1
    echo "}"
}

stax-start-service(){
    if [ -z "$1" ]; then
        stax-error-exit "you must provide a service name, exiting" 2
    fi
    service="$1"
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}   starting service $service on the stax cluster"
    servicerunner="$STAX_NAME.$service"
    servicerunner_path="$STAX_DIR/$servicerunner"
    sed -e "s|@STAX_KEY@|${STAX_KEY}|g" -e "s|@SOME_SERVICE@|$service|g" assets/stax/servicerunner > "$servicerunner_path"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     pushing service file to $STAX_PUB_IP: "
    stax-ssh-key-add
    scp $SSH_OPTIONS "$servicerunner_path" "ec2-user@$STAX_PUB_IP:$servicerunner" > /dev/null
    echo "done"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     running service file: "
    ssh $SSH_OPTIONS "ec2-user@$STAX_PUB_IP" "bash $servicerunner" > /dev/null
    echo "done"
    stax-ssh-key-remove
    sleep 5
}

stax-fleetstats(){
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}  status from fleetctl on the cluster: "
    stax-ssh-key-add
    ssh $SSH_OPTIONS ec2-user@$STAX_PUB_IP 'sh fleetstats'
    stax-ssh-key-remove
}

stax-descauto(){
    echo "${yellow}[ ${cyan}NAME${yellow} ]${reset} $STAX_NAME"
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}   define autoscaling policies"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     querying aws: "
    aws autoscaling describe-auto-scaling-groups | grep "arn:aws:autoscaling" | grep `cat $STAX_NAME_FILE` | cut -d"/" -f2 | cut -d"\"" -f1 > /tmp/asg; 
    echo "done"
    aws autoscaling describe-policies --auto-scaling-group-name `cat /tmp/asg`
    rm /tmp/asg
    exit 0
}

stax-history(){
    stax-message "history"
    if [ ! -d $STAX_DIR/audit ]; then
        mkdir -p $STAX_DIR/audit
    fi
    stax-message "  recently created and destoryed stax"
    echo "{"
    ls -1 $STAX_DIR/audit
    echo "}"
}

stax-getip(){
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}   get public IP (EIP)"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     querying aws: "
    STAX_PUB_IP=`cat "$STAX_DIR/$STAX_NAME.json" | grep -B2 -A2 'JumpEIP' | grep -o '[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*'`
    echo "done"
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}     public IP (EIP): $STAX_PUB_IP"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     writing to $STAX_IPS_FILE: "
    echo $STAX_PUB_IP > $STAX_IPS_FILE
    echo "done"
}

stax-motd(){
    echo "     _             " > /tmp/motd
    echo "    | | welcome to the jumpbox" >> /tmp/motd
    echo " ___| |_ __ ___  __" >> /tmp/motd
    echo '/ __| __/ _` \ \/ /' >> /tmp/motd
    echo "\__ \ || (_| |>  <" >> /tmp/motd
    echo "|___/\__\__,_/_/\_\\" >> /tmp/motd
    echo >> /tmp/motd
    echo "IP        `echo $STAX_PUB_IP`" >> /tmp/motd
    echo "Name      `cat $STAX_NAME_FILE`" >> /tmp/motd
    echo "Built     `date`" >> /tmp/motd
}

stax-popjumpbox(){
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}   setup motd and bashrc on jumpbox"
    stax-ssh-key-add
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     pushing motd to $STAX_PUB_IP: "
    if [ ! -f '/tmp/motd' ]; then
        stax-error-exit "motd file not found, exiting" 1
    fi
    scp $SSH_OPTIONS /tmp/motd ec2-user@$STAX_PUB_IP:~ > /dev/null
    echo "done"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     pushing bashrc to $STAX_PUB_IP: "
    scp $SSH_OPTIONS assets/stax/bashrc ec2-user@$STAX_PUB_IP:~/.bashrc > /dev/null
    echo "done"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     copying service definitions to $STAX_PUB_IP: "
    scp $SSH_OPTIONS -r assets/services ec2-user@$STAX_PUB_IP:~ > /dev/null
    echo "done"
    rm /tmp/motd
    stax-ssh-key-remove
}

stax-getdockerips(){
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}   get docker IP(s)"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     querying aws: "
    service_hosts="$STAX_DIR/$STAX_NAME.service_hosts"
    # this will not print the IP address of a host if it is the last host in the list
    aws ec2 describe-instances --output text --query 'Reservations[*].Instances[*]' | awk "\$1 == \"0\" { if (ip != \"\" && name == \"container-$STAX_NAME\") print ip; ip = \"\" } \$1 == \"PRIVATEIPADDRESSES\" { ip = \$NF } \$1 == \"TAGS\" && \$2 == \"Name\" { name = \$3 }" > "$service_hosts"
    router_hosts="$STAX_DIR/$STAX_NAME.router_hosts"
    aws ec2 describe-instances --output text --query 'Reservations[*].Instances[*]' | awk "\$1 == \"0\" { if (ip != \"\" && name == \"router-$STAX_NAME\") print ip; ip = \"\" } \$1 == \"PRIVATEIPADDRESSES\" { ip = \$NF } \$1 == \"TAGS\" && \$2 == \"Name\" { name = \$3 }" > "$router_hosts"
    echo "done"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     building fleetstats connect: "
    fleet_stats="$STAX_DIR/$STAX_NAME.fleetstats"
    sed "s|STAX_KEY|${STAX_KEY}|g" assets/stax/fleetstats > "$fleet_stats"
    echo "done"
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     building fleetslogs connect: "
    fleet_logs="$STAX_DIR/$STAX_NAME.fleetlogs"
    sed "s|STAX_KEY|${STAX_KEY}|g" assets/stax/fleetlogs > "$fleet_logs"
    echo "done"
    stax-ssh-key-add
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     putting connect files on jumpbox: "
    scp $SSH_OPTIONS "$fleet_stats" ec2-user@$STAX_PUB_IP:fleetstats > /dev/null
    scp $SSH_OPTIONS "$fleet_logs" ec2-user@$STAX_PUB_IP:fleetlogs > /dev/null
    ssh $SSH_OPTIONS ec2-user@$STAX_PUB_IP 'chmod 0755 fleetstats' > /dev/null
    ssh $SSH_OPTIONS ec2-user@$STAX_PUB_IP 'chmod 0755 fleetlogs' > /dev/null
    echo "done"
    stax-ssh-key-remove
}

stax-ssh-key-add(){
    if ! ssh-add "$STAX_KEY_FILE"; then
        stax-error-exit "failed to add private key to ssh-agent: $STAX_KEY_FILE" 1
    fi
}

stax-ssh-key-remove(){
    if ! ssh-add -d "$STAX_KEY_FILE"; then
        stax-error "failed to remove private key from ssh-agent"
        stax-error "please remove yourself"
    fi
}

stax-connect(){
    target="$1"
    shift
    if [[ -z $target ]]; then
        target=jump
    fi
    stax-ssh-key-add
    ssh_cmd="ssh $SSH_OPTIONS"
    jump="ec2-user@$STAX_PUB_IP"
    proxy_args="-A -o 'ProxyCommand=ssh $SSH_OPTIONS $jump nc -w 120 %h %p'"
    case "$target" in
        jump)
            ssh_cmd="$ssh_cmd $jump"
            ;;
        router|service)
            case "$target" in
                router) hosts="$STAX_DIR/$STAX_NAME.router_hosts";;
                service) hosts="$STAX_DIR/$STAX_NAME.service_hosts";;
            esac
            if [[ ! -f $hosts ]]; then
                stax-error-exit "hosts file does not exist: $hosts" 1
            fi
            # get random host
            host=$(head -n $(($RANDOM % $(wc -l < $hosts) + 1)) $hosts | tail -n 1)
            ssh_cmd="$ssh_cmd $proxy_args core@$host"
            ;;
        *)
            stax-ssh-key-remove
            stax-error-exit "unknown connection target: $target" 1
            ;;
    esac
    ssh_cmd="$ssh_cmd $@"
    if ! $ssh_cmd; then
        stax-error "ssh command failed: $ssh_cmd"
        stax-ssh-key-remove
        exit 1
    fi
    stax-ssh-key-remove
}

stax-destroy-key(){
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     deleting $STAX_NAME key: "
    $aws ec2 delete-key-pair --key-name "$STAX_NAME" > /dev/null
    rm -f $STAX_KEY_FILE
    echo "done"
}

stax-destroy-files(){
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     deleting $STAX_NAME files: "
    rm -f "$STAX_DIR/$STAX_NAME"* "$STAX_NAME_FILE" > /dev/null
    echo "done"
}

stax-destroy-bucket(){
    if [ "$STAX_NAME" ]; then
        echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     removing $STAX_NAME s3 bucket: "
        $aws s3 rb --force "s3://$STAX_NAME" > /dev/null
        echo "done"
    fi
}

stax-destroy(){
    confirmed="$1"
    echo "${yellow}[ ${cyan}----${yellow} ]${reset}   destroy stax"
    if [[ -z $confirmed ]]; then
        read -p "${yellow}[ ${cyan}????${yellow} ]${reset}     ok to destroy $STAX_NAME [y/n]? " answer
        if [[ $answer != y ]] ; then
            stax-message "will not destroy $STAX_NAME"
            exit 0
        fi
    fi
    echo -n "${yellow}[ ${cyan}----${yellow} ]${reset}     destroying $STAX_NAME stax: "
    if $aws cloudformation delete-stack --stack-name $STAX_NAME; then
        echo "done"
        stax-message "recording $STAX_NAME deletion time for audit"
        touch $STAX_DIR/audit/`date +'%Y%m%d-%H%M%S'`-destroyed-$STAX_NAME
        stax-destroy-bucket
        stax-destroy-files
        stax-destroy-key
    else
        echo "failed"
        stax-error-exit "you will need to clean up the stack, key, bucket, and files" 1
    fi
}

# bootstrap: set up STAX_NAME and config file
stax-generate(){
    stax_words="assets/stax/stax-words"
    NUMW=`wc -l < $stax_words`
    RANDOM_NAM=`head -$((${RANDOM} % ${NUMW} + 1)) $stax_words | tail -1`
    RANDOM_NUM=$((RANDOM%99999+10001))
    STAX_NAME="vpc-$STAX_PRE_NAME-$RANDOM_NUM-$RANDOM_NAM"
}

# generate parameters file
stax-config(){
    stax-message "creating parameter file"
    # initialize sed command
    sed="sed -e s/@KEY_NAME@/$STAX_NAME/"
    # check what subsitutions need to be done
    if grep -q '@OWNER@' "$config" > /dev/null 2>&1; then
        owner="$(id -u -n)"
        if [[ -z $owner ]]; then
            stax-error-exit "failed to determine user" 1
        fi
        sed="$sed -e s/@OWNER@/$owner/"
    fi
    if grep -q '@SSH_FROM@' "$config" > /dev/null 2>&1; then
        SSH_FROM="$(curl -s http://icanhazip.com)/32"
        if [ -z "$SSH_FROM" ]; then
            stax-error-exit "failed to get IP address for local machine" 1
        fi
        sed="$sed -e s|@SSH_FROM@|$SSH_FROM|"
    fi
    if grep -q '@HTTP_FROM@' "$config" > /dev/null 2>&1; then
        # same as SSH_FROM
        sed="$sed -e s|@HTTP_FROM@|$SSH_FROM|"
    fi
    if grep -q '@DISCOVERY_URL@' "$config" > /dev/null 2>&1; then
        DISCOVERY_URL="$(curl -s http://discovery.etcd.io/new)"
        if [ -z "$DISCOVERY_URL" ]; then
            stax-error-exit "failed to get discovery URL" 1
        fi
        sed="$sed -e s|@DISCOVERY_URL@|$DISCOVERY_URL|"
    fi
    STAX_PARAMS="$STAX_DIR/$STAX_NAME.params"
    if ! $sed "$config" > "$STAX_PARAMS"; then
        stax-error-exit "sed failed to replace elements in $config: $sed" 1
    fi
}

# automated test
stax-test(){
    echo "${yellow}[ ${cyan}TEST${yellow} ]${reset}   running stax test"
    # create dummy parameter config
    user=$(id -u -n)
    config="/tmp/test-config-$user-$$-$RANDOM.json"
    cat > "$config" <<EOF
[
  { "ParameterKey": "App",                "ParameterValue": "Stax Auto Test" },
  { "ParameterKey": "Group",              "ParameterValue": "ITSA" },
  { "ParameterKey": "CostCenter",         "ParameterValue": "5180-9130-SLR74733" },
  { "ParameterKey": "DockerInstanceType", "ParameterValue": "t2.micro" },
  { "ParameterKey": "Owner",              "ParameterValue": "@OWNER@" },
  { "ParameterKey": "KeyName",            "ParameterValue": "@KEY_NAME@" },
  { "ParameterKey": "AllowSSHFrom",       "ParameterValue": "@SSH_FROM@" },
  { "ParameterKey": "AllowHTTPFrom",      "ParameterValue": "@HTTP_FROM@" },
  { "ParameterKey": "DiscoveryURL",       "ParameterValue": "@DISCOVERY_URL@" }
]
EOF
    stax-create
    rm -f "$config"
    # wait while it is building
    stax-complete 1
    stax-getip
    stax-connect jump hostname
    #stax-connect router docker exec consul consul members
    #stax-connect service fleetctl list-members
    # systemctl status consul
    # journalctl -u consul
    # curl localhost:8500/v1/catalog/nodes
    # start httpbin
    # curl ELB/httpbin/get
    # fleetctl list-
    stax-destroy 1
}

# process positional parameters
config="config/config.json"
sub_cmd=
sub_cmd_args=
prev_arg=
for arg
do
    if test -n "$prev_arg"; then
        eval "$prev_arg=\$arg"
        prev_arg=
        continue
    fi

    case "$arg" in
        -*=*) optarg=`echo "$arg" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
        *) optarg= ;;
    esac

    case "$arg" in
        -c | --config | --confi | --conf | --con | --co | --c)
            prev_arg=config
            ;;

        --config=* | --confi=* | --conf=* | --con=* | --co=* | --c=*)
            config="$optarg"
            ;;

        -d | --debug | --debu | --deb | --de | -d)
            DEBUG="ON"
            ;;

        -h | --help | --hel | --he | --h)
            stax-usage
            exit 0;;

        -v | --version | --versio | --versi | --vers | --ver | --ve | --v)
            echo "$pkg $version"
            exit 0;;

        -*)
            echo "$pkg: unknown option: $arg"
            echo "$pkg: Try '$pkg --help' for help."
            exit 1
            ;;

        *)
            if [[ -z $sub_cmd ]]; then
                sub_cmd="$arg"
            elif [[ -z $sub_cmd_args ]]; then
                sub_cmd_args="$arg"
            else
                sub_cmd_args="$sub_cmd_args $arg"
            fi
            ;;

    esac
done

# make sure a command was provided
if [[ -z $sub_cmd ]]; then
    stax-usage
    exit 2
fi

# generic setup
stax-colors
stax-logo
stax-preflight

if [ -f "$STAX_NAME_FILE" ]; then
    STAX_NAME=$(<$STAX_NAME_FILE)
    STAX_DESC="$STAX_DIR/$STAX_NAME.json"
    STAX_PARAMS="$STAX_DIR/$STAX_NAME.params"
    STAX_KEY="$STAX_NAME"
    STAX_KEY_FILE="$STAX_DIR/$STAX_NAME.pem"
    STAX_IPS_FILE="$STAX_DIR/$STAX_NAME.ips"
fi

# determine which subcommand to run
if [ "$DEBUG" == "ON" ]; then echo "----- DEBUG :::: $sub_cmd $sub_cmd_args -----"; fi
case "$sub_cmd" in
    connect)
        stax-existing
        stax-describe
        if [ ! -f "$STAX_IPS_FILE" ]; then
            stax-getip
            stax-pushkey
            stax-motd
            stax-popjumpbox
            stax-getdockerips
        fi
        STAX_PUB_IP=$(<$STAX_IPS_FILE)
        stax-connect
        ;;

    create)
        stax-create
        stax-describe
        ;;

    desc-auto)
        stax-existing
        stax-descauto
        ;;

    desc*)
        stax-existing
        stax-describe
        ;;

    destroy)
        stax-existing
        stax-destroy
        ;;

    fleet)
        stax-existing
        if [ ! -f "$STAX_IPS_FILE" ]; then
            stax-getip
            stax-pushkey
            stax-motd
            stax-popjumpbox
            stax-getdockerips
        fi
        STAX_PUB_IP=$(<$STAX_IPS_FILE)
        stax-fleetstats
        ;;

    help)
        stax-usage
        ;;

    history)
        stax-history
        ;;

    list)
        stax-list
        ;;

    services)
        stax-services
        ;;

    start)
        if [[ ! $sub_cmd_args ]]; then
            stax-error "no services listed, available ones are"
            stax-services
            exit 2
        fi
        stax-existing
        stax-getip
        if [ ! -f "$STAX_IPS_FILE" ]; then
            stax-pushkey
            stax-motd
            stax-popjumpbox
            stax-getdockerips
        fi
        for service in $sub_cmd_args; do
            stax-start-service "$service"
        done
        stax-fleetstats
        ;;

    test)
        stax-test
        ;;

    *)
        stax-error "unknown stax command: $sub_cmd"
        stax-usage
        exit 2
        ;;

esac

exit 0
