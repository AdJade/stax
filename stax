#!/bin/bash

set -e

##################################################################
#   stax - for aws ec2 - https://github.com/philcryer/stax
#   https://github.com/philcryer/stax/blob/master/LICENSE
#               "this should work(tm)!"
#
#TODO
#   * better formating with more (specific) details in jq output
#   * learn conversational german
##################################################################

SCRIPT_PATH=$( cd $(dirname $0) ; pwd -P )

stax-colors(){
  green=$(tput setaf 2)
  yellow=$(tput setaf 3)
  blue=$(tput setaf 4)
  purple=$(tput setaf 5)
  cyan=$(tput setaf 6)
  white=$(tput setaf 7)
  reset=$(tput sgr0)
}

stax-usage(){
echo "Usage: stax command"

echo; echo "Commands:"
echo "  create            Create new stax"
echo "  describe | desc   Describe created stax"
echo "  getip             Get the public, or elastic IP of created stax"
echo "  destroy           Destroy existing stax"
echo "  dryrun            Don't do anything, just show what would be done"

echo; echo "For more help, check the docs; https://github.com/philcryer/stax"
exit 1
}

[ $# -gt 0 ] || stax-usage

stax-logo(){
NUMS=`wc -l < config/stax-slogans`
  echo "${green}     _             "
  echo "    | | ${yellow}`head -$((${RANDOM} % ${NUMS} + 1)) config/stax-slogans | tail -1`${green}"
  echo " ___| |_ __ ___  __"
  echo '/ __| __/ _` \ \/ /'
  echo '\__ \ || (_| |>  < '
  echo "|___/\__\__,_/_/\_\ ${reset}"
  echo
}

stax-existing(){
  if [ ! -f $HOME/.stax/stax-name ]; then
    echo "${yellow}[ ${red}ERRR${yellow} ]${reset} no stax defined, use create first"
    exit 1
  fi
}

stax-preflight(){
  which jq > /dev/null 2>&1 || { echo "jq (commandline JSON processor) is not installed. Aborting."; exit 1; }
  echo "${yellow}[  ${green}ok${yellow}  ]${reset} jq installed"
  which aws > /dev/null 2>&1 || { echo "awscli is not installed. Aborting."; exit 1; }
  echo "${yellow}[  ${green}ok${yellow}  ]${reset} awscli installed"
  if [ ! -f ${HOME}/.aws/config ]; then
     echo "awscli not configured, run 'aws configure'. Aborting."; exit 1
  fi
  echo "${yellow}[  ${green}ok${yellow}  ]${reset} awscli configured"
  if [ ! -d ~/.stax ]; then
    mkdir ~/.stax
  fi
  echo "${yellow}[  ${green}ok${yellow}  ]${reset} stax config dir available"
  if [ ! -f ~/.stax/config ]; then
    cp config/stax-config ${HOME}/.stax/config
  fi
  echo "${yellow}[  ${green}ok${yellow}  ]${reset} stax config file available"
  echo "${yellow}[  ${green}ok${yellow}  ]${reset} sourcing config file"
  stax-config
  aws ec2 describe-key-pairs --key-names $STACK_KEY_PAIR --region $STACK_REGION > /dev/null 2>&1 || { echo "${yellow}[ ${red}ERRR${yellow} ]${reset} keypair $STACK_KEY_PAIR does not exit."; exit 1; }
}

stax-config(){
  source ${HOME}/.stax/config
}

stax-summary(){
  echo "${yellow}[ ${cyan}----${yellow} ]${reset} stax summary"
  echo "${yellow}[ ${blue}info${yellow} ]${reset} stax name: $STACK_NAME"
  echo "${yellow}[ ${blue}info${yellow} ]${reset} instance type: $STACK_INSTANCE_TYPE"
  echo "${yellow}[ ${blue}info${yellow} ]${reset} cluster size: $STACK_CLUSTER_SIZE nodes"
  echo "${yellow}[ ${blue}info${yellow} ]${reset} discovery url: $STACK_DISCOVERY_URL"
  echo "${yellow}[ ${blue}info${yellow} ]${reset} ec2 key pair: $STACK_KEY_PAIR"
  echo "${yellow}[ ${blue}info${yellow} ]${reset} ssh from ip: $STACK_SSHFROM"
}

stax-create(){
  stax-generate
  STACK_NAME="$STACK_PRE_NAME-$RANDOM_NUM-$RANDOM_NAM"
  echo $STACK_NAME > ~/.stax/stax-name
  echo "${yellow}[ ${cyan}----${yellow} ]${reset} creating $STACK_CLUSTER_SIZE nodes - $STACK_NAME"
  aws --no-verify-ssl --color on cloudformation create-stack \
    --region $STACK_REGION \
    --stack-name $STACK_NAME \
    --template-body file://$SCRIPT_PATH/templates/cloudformation-template-$COREOS_CHANNEL.json \
    --parameters \
      "ParameterKey=InstanceType,ParameterValue=$STACK_INSTANCE_TYPE,UsePreviousValue=false" \
      "ParameterKey=ClusterSize,ParameterValue=$STACK_CLUSTER_SIZE,UsePreviousValue=false" \
      "ParameterKey=DiscoveryURL,ParameterValue=$STACK_DISCOVERY_URL,UsePreviousValue=false" \
      "ParameterKey=AdvertisedIPAddress,ParameterValue=private,UsePreviousValue=false" \
      "ParameterKey=AllowSSHFrom,ParameterValue=$STACK_SSHFROM,UsePreviousValue=false" \
      "ParameterKey=KeyPair,ParameterValue=$STACK_KEY_PAIR,UsePreviousValue=false"
}

stax-describe(){
  aws cloudformation describe-stacks --stack-name $STACK_NAME > /dev/null 2>&1 || { echo "${yellow}[ ${cyan}----${yellow} ]${reset} no stax defined"; rm $HOME/.stax/stax-name; exit 1; }
  echo "${yellow}[ ${cyan}----${yellow} ]${reset} describe $STACK_NAME"
  aws cloudformation describe-stacks --stack-name $STACK_NAME > /dev/null && aws cloudformation describe-stacks --stack-name $STACK_NAME --output table
}

stax-list(){
  echo "${yellow}[ ${cyan}----${yellow} ]${reset} list all existing stax"
  aws cloudformation list-stacks |jq '.StackSummaries[].StackName'
  exit 0
}

stax-getip(){
  echo "${yellow}[ ${cyan}----${yellow} ]${reset} looking up public ip"
  aws ec2 describe-instances | jq '.Reservations[].Instances[].PublicIpAddress'
  exit 0
}

stax-destroy(){
  aws cloudformation describe-stacks --stack-name $STACK_NAME > /dev/null && aws cloudformation delete-stack --stack-name $STACK_NAME 
  rm $HOME/.stax/$STACK_NAME.json > /dev/null
  rm $HOME/.stax/stax-name > /dev/null
}

stax-generate(){
  STACK_DISCOVERY_URL=$(curl -s http://discovery.etcd.io/new)
  STACK_SSHFROM="$(curl -s http://icanhazip.com)/32"
  NUMW=`wc -l < config/stax-words`
  RANDOM_NAM=`head -$((${RANDOM} % ${NUMW} + 1)) config/stax-words | tail -1`
  RANDOM_NUM=$((RANDOM%99999+10001))
}

clear
stax-colors
stax-logo
stax-preflight

if [ -f $HOME/.stax/stax-name ]; then
  STACK_NAME=`cat $HOME/.stax/stax-name`
fi

if [[ "$1" == "dryrun" ]]; then
  stax-existing
  stax-generate
  stax-summary
  echo "${yellow}[ ${cyan}----${yellow} ]${reset} dryrun only, exiting"
  exit 0
fi

if [[ "$1" == "create" ]]; then
  if [ -f $HOME/.stax/stax-name ]; then
    echo "${yellow}[ ${red}ERRR${yellow} ]${reset} existing stax defined, exiting";
    exit 1
  else
    stax-create
    stax-describe
    aws cloudformation describe-stacks --stack-name $STACK_NAME > ~/.stax/$STACK_NAME.json
    echo "${yellow}[ ${cyan}----${yellow} ]${reset} creation complete"
    exit 0
  fi
fi

if [[ "$1" == "describe" || "desc" ]]; then
  stax-existing
  if [ -f $HOME/.stax/stax-name ]; then
    stax-describe
  else
    echo "${yellow}[ ${red}ERRR${yellow} ]${reset} no stax defined, use create first"
    exit 1
  fi
fi

if [[ "$1" == "getip" ]]; then
  stax-existing
  stax-summary
  if [ -f $HOME/.stax/stax-name ]; then
    stax-getip
  else
    echo "${yellow}[ ${red}ERRR${yellow} ]${reset} no stax defined, use create first"
    exit 1
  fi
fi

if [[ "$1" == "destroy" ]]; then
  stax-existing
  if [ -f $HOME/.stax/stax-name ]; then
    read -p "${yellow}[ ${cyan}????${yellow} ]${reset} ok to destroy $STACK_NAME [y/n]? " answer
    if [[ $answer = y ]] ; then
        stax-destroy
        echo "${yellow}[ ${cyan}----${yellow} ]${reset} $STACK_NAME will be destroyd"
    fi
  else
    echo "${yellow}[ ${cyan}----${yellow} ]${reset} could not destroy $STACK_NAME, check name"
    exit 1
  fi
fi

exit 0
